
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Arben
 */
public class ViewTasks extends javax.swing.JFrame {

    /**
     * Creates new form ViewTasks
     */
    private int user_id = 0;
    private String user_name = "None";
    private int recurrent_status = 9001;
    public Dashboard d = null;
    public int getUser_id(){
        return this.user_id;
    }
    
    public String getUser_name(){
        return this.user_name;
    }
    
    public void setUser_id(int id){
        this.user_id = id;
    }   
    
    public void setUser_name(String username){
        this.user_name = username;
    }
    public ViewTasks() {
        initComponents();
        FillComboBoxStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_Tasks = new javax.swing.JTable();
        jTextField_tasks_taskname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField_tasks_taskDescription = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField_tasks_taskStatus = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jDateChooser_tasks_duedate = new com.toedter.calendar.JDateChooser();
        jTextField_tasks_taskDuedate = new javax.swing.JTextField();
        jButton_tasks_edit = new javax.swing.JButton();
        recurrentStatusComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton_tasks_deleteButton = new javax.swing.JButton();
        jComboBox_status = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(239, 233, 233));

        jTable_Tasks.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jTable_Tasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task_id", "Name", "Description", "Due Date", "Status", "Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_TasksMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable_Tasks);

        jLabel5.setText("Task name");

        jLabel6.setText("Description");

        jTextField_tasks_taskDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_tasks_taskDescriptionActionPerformed(evt);
            }
        });

        jLabel7.setText("DueDate");

        jTextField_tasks_taskStatus.setText("Pick a status below");
        jTextField_tasks_taskStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_tasks_taskStatusActionPerformed(evt);
            }
        });

        jLabel8.setText("Status");

        jTextField_tasks_taskDuedate.setText("Pick a date below");
        jTextField_tasks_taskDuedate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_tasks_taskDuedateActionPerformed(evt);
            }
        });

        jButton_tasks_edit.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton_tasks_edit.setText("Update");
        jButton_tasks_edit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.white));
        jButton_tasks_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_tasks_editActionPerformed(evt);
            }
        });

        recurrentStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" ,"Daily", "Weekly", "Monthly",}));
        recurrentStatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurrentStatusComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Repeating");

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Your Tasks");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(682, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton_tasks_deleteButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton_tasks_deleteButton.setText("Delete");
        jButton_tasks_deleteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.white));
        jButton_tasks_deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_tasks_deleteButtonActionPerformed(evt);
            }
        });

        jComboBox_status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_statusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jDateChooser_tasks_duedate, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton_tasks_edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_tasks_deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)))
                                .addGap(8, 8, 8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(15, 15, 15)
                                        .addComponent(jTextField_tasks_taskDuedate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField_tasks_taskname, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(jTextField_tasks_taskDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(recurrentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox_status, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField_tasks_taskStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_tasks_taskname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField_tasks_taskDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jTextField_tasks_taskDuedate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser_tasks_duedate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(recurrentStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_tasks_taskStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_tasks_edit, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(jButton_tasks_deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable_TasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_TasksMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        int selectedRowIndex = jTable_Tasks.getSelectedRow();
        
        jTextField_tasks_taskname.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField_tasks_taskDescription.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jTextField_tasks_taskDuedate.setText(model.getValueAt(selectedRowIndex, 3).toString());
        jTextField_tasks_taskStatus.setText(model.getValueAt(selectedRowIndex, 4).toString());

    }//GEN-LAST:event_jTable_TasksMouseClicked

    private void jTextField_tasks_taskDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_tasks_taskDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_tasks_taskDescriptionActionPerformed

    private void jTextField_tasks_taskStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_tasks_taskStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_tasks_taskStatusActionPerformed

    private void jButton_tasks_deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_tasks_deleteButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        int selectedRowIndex = jTable_Tasks.getSelectedRow();
        System.out.println("selectedRowIndex = " + Integer.toString(selectedRowIndex));
        String selected_task_id = model.getValueAt(selectedRowIndex, 0).toString();
        deleteTask(selected_task_id);
        model.removeRow(selectedRowIndex);
    }//GEN-LAST:event_jButton_tasks_deleteButtonActionPerformed

    private void jTextField_tasks_taskDuedateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_tasks_taskDuedateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_tasks_taskDuedateActionPerformed

    private void jButton_tasks_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_tasks_editActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        int selectedRowIndex = jTable_Tasks.getSelectedRow();
        System.out.println("selectedRowIndex = " + Integer.toString(selectedRowIndex));
        String selected_task_id = model.getValueAt(selectedRowIndex, 0).toString();
        editTask(selected_task_id);
        d.ClearRowsJTable();
        d.populateList();
    }//GEN-LAST:event_jButton_tasks_editActionPerformed

    private void recurrentStatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recurrentStatusComboBoxActionPerformed
    try {
        String str = recurrentStatusComboBox.getSelectedItem().toString();
            switch(str){
                case "Daily":
                    recurrent_status = 1;
                    break;
                case "Weekly":
                    recurrent_status = 2;
                    break;
                case "Monthly":
                    recurrent_status = 3;
                    break;
                default:
                    recurrent_status = 9001;
            }
            System.out.println("case: " + Integer.toString(recurrent_status));
            System.out.println("str: " + str);

        } catch (Exception ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_recurrentStatusComboBoxActionPerformed

    private void jComboBox_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_statusActionPerformed
        // TODO add your handling code here:
        try{
            String str = jComboBox_status.getSelectedItem().toString();
            String iStatus = "0";
            switch(str){
                case "Not Started":
                    iStatus = "1";
                    break;
                case "In Progess":
                    iStatus = "2";
                    break;
                case "Done":
                    iStatus = "3";
                    break;
                case "Abandon":
                    iStatus = "4";
                    break;
                default:
                    iStatus = "0";
            }
        jTextField_tasks_taskStatus.setText(iStatus);
            
        }catch (Exception ex){
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox_statusActionPerformed
    
    private void FillComboBoxStatus()
    {
        try{
            jComboBox_status.removeAllItems();
            jComboBox_status.addItem("");
            jComboBox_status.addItem("Not Started");
            jComboBox_status.addItem("In Progess");
            jComboBox_status.addItem("Done");
            jComboBox_status.addItem("Abandon");        
        }catch (Exception ex){
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void ClearRowsJTable(){
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    public void AddRowToJTable(Object[] dataRow){
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        model.addRow(dataRow);
        changeCellColor(jTable_Tasks,4);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTasks().setVisible(true);
                
            }
        });        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_tasks_deleteButton;
    private javax.swing.JButton jButton_tasks_edit;
    private javax.swing.JComboBox<String> jComboBox_status;
    private com.toedter.calendar.JDateChooser jDateChooser_tasks_duedate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable_Tasks;
    private javax.swing.JTextField jTextField_tasks_taskDescription;
    private javax.swing.JTextField jTextField_tasks_taskDuedate;
    private javax.swing.JTextField jTextField_tasks_taskStatus;
    private javax.swing.JTextField jTextField_tasks_taskname;
    private javax.swing.JComboBox<String> recurrentStatusComboBox;
    // End of variables declaration//GEN-END:variables
    protected void populateList()
    {
        Connection dbconn= DBConnection.connectDB();
        DefaultListModel dmTaskName = new DefaultListModel();
        DefaultListModel dmTaskDesc = new DefaultListModel();
        DefaultListModel dmTaskDueDate = new DefaultListModel();
        DefaultListModel dmTaskStatus = new DefaultListModel();
        DefaultListModel dmTaskCategory = new DefaultListModel();
        try {
        String u;
        PreparedStatement st = (PreparedStatement)
                dbconn.prepareStatement("Select * from task where user_id = ?");
        String user_idStr = Integer.toString(this.user_id);
        
        st.setString(1, user_idStr);
        ResultSet rs = st.executeQuery();
        while(rs.next())
        {
            u = rs.getString(2);
            dmTaskName.addElement(u);
            
            u = rs.getString(3);
            dmTaskDesc.addElement(u);
            
            u = rs.getString(5);
            dmTaskDueDate.addElement(u);
            
            u = rs.getString(7);
            dmTaskStatus.addElement(u);

            u = rs.getString(8);
            String CatName = getCategoryNameFromID(u);
            System.out.println("type of CatName: " + CatName.getClass().getName());
            dmTaskCategory.addElement(CatName);

            AddRowToJTable(new Object[]{
                            rs.getString(1),
                            rs.getString(2),
                            rs.getString(3),
                            rs.getString(5),
                            rs.getString(7),
                            CatName
                            
                            });
        }
        rs.close();
        st.close();
        } catch (Exception ex) {
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteTask(String task_id)
    {
        Connection dbconn= DBConnection.connectDB();
        System.out.println("in ViewTasks " + task_id);

        try {
        PreparedStatement st = (PreparedStatement)
                dbconn.prepareStatement("Delete from task where task_id = ?");
        
        st.setString(1, task_id);
        int rs = st.executeUpdate();
        if (rs == 1){
            System.out.println("in ViewTasks -- delete successful");
        } else {
            System.out.println("in ViewTasks -- delete fail");
        }
        st.close();
        } catch (Exception ex) {
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void editTask(String task_id) {
        
        Connection dbconn= DBConnection.connectDB();
        System.out.println("in ViewTasks" + task_id);
        SimpleDateFormat dateTimeFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        try {
        PreparedStatement st = (PreparedStatement)
                dbconn.prepareStatement("UPDATE task SET task_name = ?, task_description = ?,"
                        + " task_duedate = ?, status = ?, recurrent_status = ? where task_id = ?;");
        st.setString(1, jTextField_tasks_taskname.getText());
        st.setString(2, jTextField_tasks_taskDescription.getText());
        
        //get date
        java.util.Date taskDate = jDateChooser_tasks_duedate.getDate();
        if (taskDate != null){
            java.sql.Date date = new java.sql.Date(taskDate.getTime());
            String sDate = date.toString();
            st.setString(3, sDate);
        } else {
            taskDate = dateTimeFormatter.parse(jTextField_tasks_taskDuedate.getText());
            st.setString(3, jTextField_tasks_taskDuedate.getText());
        }
        String srecurrent_status = Integer.toString(recurrent_status);
        String status = jTextField_tasks_taskStatus.getText();
        st.setString(4,status);
        st.setString(5, srecurrent_status );
        st.setString(6, task_id);
        int rs = st.executeUpdate();
        if (rs == 1){
            //update GUI and create and execute second query for user_completed_tasks
            System.out.println("in ViewTasks -- first edit successful");
            System.out.println("status: " + status);
            if (status.equals("3"))
            {
                //get current date      
                Date currentDate=java.util.Calendar.getInstance().getTime();
                System.out.println("currentDate: " + currentDate);
                System.out.println("taskDate: " + taskDate);
                int dateCompared=currentDate.compareTo(taskDate); //compareto is a function defined for date
                int dateResult = 0;
                if (dateCompared <=0)
                    dateResult = 2;
                else
                    dateResult = 1;
                
                //send query to user_completed_task table
                try{
                    PreparedStatement stCompleteTasks = (PreparedStatement)
                        dbconn.prepareStatement("Insert into user_completed_tasks(completed_user_id, completed_task_id, completed) values (?,?,?)");
                    stCompleteTasks.setString(1, Integer.toString(this.user_id));
                    stCompleteTasks.setString(2, task_id);
                    stCompleteTasks.setString(3, Integer.toString(dateResult));
                    
                    int rsCompleteTasks = stCompleteTasks.executeUpdate();
                    if (rsCompleteTasks == 1)
                    {
                        System.out.println("in ViewTasks -- second edit successful");
                    }
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(this, "Big Dingus move", "Error", JOptionPane.ERROR_MESSAGE);

                }
            }            
            // set value of the row
            DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
            int selectedRowIndex = jTable_Tasks.getSelectedRow();
            model.setValueAt(jTextField_tasks_taskname.getText(), selectedRowIndex, 1);
            model.setValueAt(jTextField_tasks_taskDescription.getText(), selectedRowIndex, 2);
            if (taskDate != null){
                java.sql.Date date = new java.sql.Date(taskDate.getTime());
                String sDate= date.toString();
                model.setValueAt(sDate, selectedRowIndex, 3);
            } else {
                st.setString(3, jTextField_tasks_taskDuedate.getText());
            }
            model.setValueAt(jTextField_tasks_taskStatus.getText(), selectedRowIndex, 4);
        } else {
            System.out.println("in ViewTasks -- edit fail");
        }
        st.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "remove null data and try again", "Error", JOptionPane.ERROR_MESSAGE);
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void changeCellColor(JTable table, int column_index) {
        table.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                int st_val = Integer.parseInt(table.getValueAt(row, 4).toString());
                final Color notStarted = new Color(153,255,153);
                final Color inProgress = new Color(255,255,102);
                final Color done = new Color(102,204,255);
                final Color abandon = new Color(255,153,153);
                if (st_val == 1) {
                    c.setBackground(notStarted);
                } else if(st_val == 2) {
                    c.setBackground(inProgress);
                }else if(st_val == 3) {
                    c.setBackground(done);
                }else if(st_val == 4) {
                    c.setBackground(abandon);
                }
                return c;
            }
        });
    }

    private String getCategoryNameFromID(String u) {
        Connection dbconn= DBConnection.connectDB();
        try {
                PreparedStatement st = (PreparedStatement)
                    dbconn.prepareStatement("Select name from category WHERE category_id = ?");
                st.setString(1, u);
                ResultSet res = st.executeQuery();
                if (res.next())
                {
                     String name = (String)res.getObject(1);
                    System.out.println("getCategoryNameFromID: " + name);
                    return(name);
                }
        
        }
        catch (Exception ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        return("category not found");
    }


}
  class MyTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Color getBackground() {
            return super.getBackground();
        }
  }
