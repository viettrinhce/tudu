import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Arben
 */
public class ViewProductivity extends javax.swing.JFrame {

    private int user_id = 0;
    private String user_name = "None";
    public int getUser_id(){
        return this.user_id;
    }
   
    public String getUser_name(){
        return this.user_name;
    }
    
    public void setUser_id(int id){
        this.user_id = id;
    }   
    
    public void setUser_name(String username){
        this.user_name = username;
    }
    public ViewProductivity() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_Tasks = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(239, 233, 233));

        jTable_Tasks.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jTable_Tasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "user", "tasks on time", "tasks late", "avg productivity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Tasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_TasksMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable_Tasks);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Team Productivity");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(682, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable_TasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_TasksMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        int selectedRowIndex = jTable_Tasks.getSelectedRow();
    }//GEN-LAST:event_jTable_TasksMouseClicked
    
    public void AddRowToJTable(Object[] dataRow){
        DefaultTableModel model = (DefaultTableModel)jTable_Tasks.getModel();
        model.addRow(dataRow);
        changeCellColor(jTable_Tasks,3);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewProductivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewProductivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewProductivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewProductivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewProductivity().setVisible(true);
//                System.out.println("viewProductivity visible");
            }
        });        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable_Tasks;
    // End of variables declaration//GEN-END:variables
    protected void populateList()
    {
        System.out.println("populateList entered");
        Connection dbconn= DBConnection.connectDB();
        try {
        //objective: get all team members. team members found in user_team as mapping. need to match your team with team_id in user_team
        //SELECT DISTINCT user_id,team_id FROM user_team where team_id in (select team_id from team where user_id = 7);
        //objective: restrict to teams you own
        //SELECT DISTINCT user_id,team_id FROM user_team where team_id in (select team_id from team where user_id = ? and team_owner_id = ?);
        //SELECT DISTINCT user_id,team_id FROM user_team where team_id in (select team_id from team where team_owner_id = ?);
        //objective: get all completed tasks from those users (ignore teams) 
//        
//        SELECT COUNT(completed) from completions where completed_user_id = 4 and completed = 2;
//        SELECT completed_user_id as user_id, completed, count(*) as lateOrNot from completions group by completed;
//        almost
        PreparedStatement st = (PreparedStatement)
                dbconn.prepareStatement("CREATE TEMPORARY TABLE users_in_teams SELECT DISTINCT user_id as uid,team_id FROM user_team where team_id in (select team_id from team where team_owner_id = ?)");
        String user_idStr = Integer.toString(this.user_id);
        st.setString(1, user_idStr);
        st.execute();
        st.close();
        PreparedStatement st2 = (PreparedStatement)
                dbconn.prepareStatement("CREATE TEMPORARY TABLE completions SELECT DISTINCT completed_user_id,completed_task_id,completed from user_completed_tasks INNER JOIN users_in_teams on completed_user_id = users_in_teams.uid where completed_user_id = users_in_teams.uid;");
        st2.execute();
                st2.close();

         PreparedStatement st3 = (PreparedStatement)
                dbconn.prepareStatement("CREATE TEMPORARY TABLE late SELECT completed_user_id, COUNT(completed) as tasks_late from completions where completed = 1 GROUP BY completed_user_id;");
        st3.execute();
                st3.close();

        PreparedStatement st4 = (PreparedStatement)
                dbconn.prepareStatement("CREATE TEMPORARY TABLE ontime SELECT completed_user_id, COUNT(completed) as tasks_ontime from completions where completed = 2 GROUP BY completed_user_id;");
        st4.execute();
                st4.close();

        PreparedStatement getData = (PreparedStatement)
                dbconn.prepareStatement("SELECT late.completed_user_id, tasks_late,tasks_ontime from late INNER JOIN ontime ON late.completed_user_id = ontime.completed_user_id group by late.completed_user_id;");
        
        ResultSet rs = getData.executeQuery();
        while(rs.next())
        {
            String retrieved_userID = rs.getString(1);
            System.out.println("In ViewProductivity: getUserID: " + retrieved_userID);

            String tasks_late = rs.getString(2);
            
            String tasks_ontime = rs.getString(3);
            
            float usr_avg_productivity = calcProductivity(tasks_late, tasks_ontime);
            AddRowToJTable(new Object[]{
                            retrieved_userID,
                            tasks_late,
                            tasks_ontime,
                            usr_avg_productivity
                            });
        }
        rs.close();
        getData.close();
        } catch (Exception ex) {
             Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void changeCellColor(JTable table, int column_index) {
        table.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                int prod_avg = Integer.parseInt(table.getValueAt(row, 4).toString());
                final Color best = new Color(153,255,153);
                final Color medium = new Color(255,255,102);
                final Color good = new Color(102,204,255);
                final Color poor = new Color(255,153,153);
                if (prod_avg < 1.25) {
                    c.setBackground(poor);
                } else if(prod_avg >= 1.25 & prod_avg <1.5) {
                    c.setBackground(medium);
                }else if(prod_avg >=1.5 & prod_avg <1.75) {
                    c.setBackground(good);
                }else if(prod_avg >1.75) {
                    c.setBackground(best);
                }
                return c;
            }
        });
    }

    private float calcProductivity(String tasks_late, String tasks_ontime) {
        int tLate = Integer.parseInt(tasks_late);
        int tOnTime = Integer.parseInt(tasks_ontime);
        float avg = ((1*tLate)*(2*tOnTime))/(tLate+tOnTime);
        return avg;
    }


}
class MyTableCellRenderer3 extends DefaultTableCellRenderer {
        @Override
        public Color getBackground() {
            return super.getBackground();
        }
  }